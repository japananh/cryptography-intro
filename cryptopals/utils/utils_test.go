package utils

import (
	"os"
	"path/filepath"
	"reflect"
	"testing"
)

func Test_getByteFrequency(t *testing.T) {
	type args struct {
		b    byte
		data []byte
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{
			name: "Test getByteFrequency run successfully",
			args: args{
				b:    1,
				data: []byte{1, 2, 3, 4, 4, 2, 213, 31, 138},
			},
			want: 0.111111111111111,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getByteFrequency(tt.args.b, tt.args.data); !IsEqualFloat(got, tt.want, epsilon) {
				t.Errorf("getByteFrequency() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_FrequencyScore(t *testing.T) {
	type args struct {
		data               []byte
		englishLetterFreqs map[byte]float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{
			name: "Test score character run successfully",
			args: args{
				data:               []byte{72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33},
				englishLetterFreqs: map[byte]float64{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0, 25: 0, 26: 0, 27: 0, 28: 0, 29: 0, 30: 0, 31: 0, 32: 0.16516097752432846, 33: 0.0005517910120401261, 34: 5.079247809574382e-05, 35: 2.308749004351992e-06, 36: 4.617498008703984e-06, 37: 2.308749004351992e-06, 38: 0, 39: 1.6161243030463944e-05, 40: 7.618871714361573e-05, 41: 7.618871714361573e-05, 42: 3.693998406963187e-05, 43: 0, 44: 0.011786163667216918, 45: 0.0004525148048529904, 46: 0.007251780622669606, 47: 1.385249402611195e-05, 48: 4.848372909139183e-05, 49: 0.00024472739446131114, 50: 8.080621515231972e-05, 51: 5.3101227100095814e-05, 52: 3.924873307398386e-05, 53: 3.463123506527988e-05, 54: 2.77049880522239e-05, 55: 5.079247809574382e-05, 56: 3.924873307398386e-05, 57: 3.463123506527988e-05, 58: 0.0001408336892654715, 59: 0.002244104032230136, 60: 0, 61: 0, 62: 0, 63: 0.0005079247809574382, 64: 0, 65: 0.0009812183268495965, 66: 0.0005933484941184619, 67: 0.0004917635379269742, 68: 0.0003047548685744629, 69: 0.0007180209403534694, 70: 0.0004963810359356782, 71: 0.0004640585498747504, 72: 0.0007249471873665255, 73: 0.007351056829856742, 74: 0.00016392117930899143, 75: 7.157121913491175e-05, 76: 0.0003024461195701109, 77: 0.0007018596973230055, 78: 0.0003186073626005749, 79: 0.00038094358571807865, 80: 0.00041326607177900654, 81: 2.308749004351992e-06, 82: 0.0002516536414743671, 83: 0.0008080621515231971, 84: 0.0015029956018331467, 85: 0.00015699493229593545, 86: 0.00010158495619148764, 87: 0.0006649197132533736, 88: 4.617498008703984e-06, 89: 0.00037401733870502267, 90: 0, 91: 1.1543745021759959e-05, 92: 0, 93: 1.1543745021759959e-05, 94: 0, 95: 0.00019393491636556732, 96: 0, 97: 0.060766273794544426, 98: 0.011003497754741593, 99: 0.020924192226442102, 100: 0.038611518348782715, 101: 0.10568067692520808, 102: 0.019642836529026746, 103: 0.01334226049615016, 104: 0.04489131564062013, 105: 0.04938875870109781, 106: 0.0009950708208757086, 107: 0.003991827028524594, 108: 0.02907869370981334, 109: 0.02376395350179505, 110: 0.05591559213640089, 111: 0.05791035127616101, 112: 0.013743982822907407, 113: 0.0007457259284056934, 114: 0.04792962933034735, 115: 0.048070463019612826, 116: 0.06875454534960232, 117: 0.0238770822030083, 118: 0.00873861498147229, 119: 0.017006245166056772, 120: 0.0015584055779375946, 121: 0.01792743601879322, 122: 0.0004917635379269742, 123: 0, 124: 0, 125: 0, 126: 0, 127: 0},
			},
			want: 1.2774508924646872,
		},
		{
			name: "Test score character return 0.0 on empty data",
			args: args{
				data:               []byte{},
				englishLetterFreqs: map[byte]float64{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0, 25: 0, 26: 0, 27: 0, 28: 0, 29: 0, 30: 0, 31: 0, 32: 0.16516097752432846, 33: 0.0005517910120401261, 34: 5.079247809574382e-05, 35: 2.308749004351992e-06, 36: 4.617498008703984e-06, 37: 2.308749004351992e-06, 38: 0, 39: 1.6161243030463944e-05, 40: 7.618871714361573e-05, 41: 7.618871714361573e-05, 42: 3.693998406963187e-05, 43: 0, 44: 0.011786163667216918, 45: 0.0004525148048529904, 46: 0.007251780622669606, 47: 1.385249402611195e-05, 48: 4.848372909139183e-05, 49: 0.00024472739446131114, 50: 8.080621515231972e-05, 51: 5.3101227100095814e-05, 52: 3.924873307398386e-05, 53: 3.463123506527988e-05, 54: 2.77049880522239e-05, 55: 5.079247809574382e-05, 56: 3.924873307398386e-05, 57: 3.463123506527988e-05, 58: 0.0001408336892654715, 59: 0.002244104032230136, 60: 0, 61: 0, 62: 0, 63: 0.0005079247809574382, 64: 0, 65: 0.0009812183268495965, 66: 0.0005933484941184619, 67: 0.0004917635379269742, 68: 0.0003047548685744629, 69: 0.0007180209403534694, 70: 0.0004963810359356782, 71: 0.0004640585498747504, 72: 0.0007249471873665255, 73: 0.007351056829856742, 74: 0.00016392117930899143, 75: 7.157121913491175e-05, 76: 0.0003024461195701109, 77: 0.0007018596973230055, 78: 0.0003186073626005749, 79: 0.00038094358571807865, 80: 0.00041326607177900654, 81: 2.308749004351992e-06, 82: 0.0002516536414743671, 83: 0.0008080621515231971, 84: 0.0015029956018331467, 85: 0.00015699493229593545, 86: 0.00010158495619148764, 87: 0.0006649197132533736, 88: 4.617498008703984e-06, 89: 0.00037401733870502267, 90: 0, 91: 1.1543745021759959e-05, 92: 0, 93: 1.1543745021759959e-05, 94: 0, 95: 0.00019393491636556732, 96: 0, 97: 0.060766273794544426, 98: 0.011003497754741593, 99: 0.020924192226442102, 100: 0.038611518348782715, 101: 0.10568067692520808, 102: 0.019642836529026746, 103: 0.01334226049615016, 104: 0.04489131564062013, 105: 0.04938875870109781, 106: 0.0009950708208757086, 107: 0.003991827028524594, 108: 0.02907869370981334, 109: 0.02376395350179505, 110: 0.05591559213640089, 111: 0.05791035127616101, 112: 0.013743982822907407, 113: 0.0007457259284056934, 114: 0.04792962933034735, 115: 0.048070463019612826, 116: 0.06875454534960232, 117: 0.0238770822030083, 118: 0.00873861498147229, 119: 0.017006245166056772, 120: 0.0015584055779375946, 121: 0.01792743601879322, 122: 0.0004917635379269742, 123: 0, 124: 0, 125: 0, 126: 0, 127: 0},
			},
			want: 0.0,
		},
		{
			name: "Test score character return 0.0 on nil data",
			args: args{
				data:               nil,
				englishLetterFreqs: map[byte]float64{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 0, 25: 0, 26: 0, 27: 0, 28: 0, 29: 0, 30: 0, 31: 0, 32: 0.16516097752432846, 33: 0.0005517910120401261, 34: 5.079247809574382e-05, 35: 2.308749004351992e-06, 36: 4.617498008703984e-06, 37: 2.308749004351992e-06, 38: 0, 39: 1.6161243030463944e-05, 40: 7.618871714361573e-05, 41: 7.618871714361573e-05, 42: 3.693998406963187e-05, 43: 0, 44: 0.011786163667216918, 45: 0.0004525148048529904, 46: 0.007251780622669606, 47: 1.385249402611195e-05, 48: 4.848372909139183e-05, 49: 0.00024472739446131114, 50: 8.080621515231972e-05, 51: 5.3101227100095814e-05, 52: 3.924873307398386e-05, 53: 3.463123506527988e-05, 54: 2.77049880522239e-05, 55: 5.079247809574382e-05, 56: 3.924873307398386e-05, 57: 3.463123506527988e-05, 58: 0.0001408336892654715, 59: 0.002244104032230136, 60: 0, 61: 0, 62: 0, 63: 0.0005079247809574382, 64: 0, 65: 0.0009812183268495965, 66: 0.0005933484941184619, 67: 0.0004917635379269742, 68: 0.0003047548685744629, 69: 0.0007180209403534694, 70: 0.0004963810359356782, 71: 0.0004640585498747504, 72: 0.0007249471873665255, 73: 0.007351056829856742, 74: 0.00016392117930899143, 75: 7.157121913491175e-05, 76: 0.0003024461195701109, 77: 0.0007018596973230055, 78: 0.0003186073626005749, 79: 0.00038094358571807865, 80: 0.00041326607177900654, 81: 2.308749004351992e-06, 82: 0.0002516536414743671, 83: 0.0008080621515231971, 84: 0.0015029956018331467, 85: 0.00015699493229593545, 86: 0.00010158495619148764, 87: 0.0006649197132533736, 88: 4.617498008703984e-06, 89: 0.00037401733870502267, 90: 0, 91: 1.1543745021759959e-05, 92: 0, 93: 1.1543745021759959e-05, 94: 0, 95: 0.00019393491636556732, 96: 0, 97: 0.060766273794544426, 98: 0.011003497754741593, 99: 0.020924192226442102, 100: 0.038611518348782715, 101: 0.10568067692520808, 102: 0.019642836529026746, 103: 0.01334226049615016, 104: 0.04489131564062013, 105: 0.04938875870109781, 106: 0.0009950708208757086, 107: 0.003991827028524594, 108: 0.02907869370981334, 109: 0.02376395350179505, 110: 0.05591559213640089, 111: 0.05791035127616101, 112: 0.013743982822907407, 113: 0.0007457259284056934, 114: 0.04792962933034735, 115: 0.048070463019612826, 116: 0.06875454534960232, 117: 0.0238770822030083, 118: 0.00873861498147229, 119: 0.017006245166056772, 120: 0.0015584055779375946, 121: 0.01792743601879322, 122: 0.0004917635379269742, 123: 0, 124: 0, 125: 0, 126: 0, 127: 0},
			},
			want: 0.0,
		},
		{
			name: "Test score character on empty frequency",
			args: args{
				data:               []byte{72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33},
				englishLetterFreqs: map[byte]float64{},
			},
			want: 1.2774508924646872,
		},
		{
			name: "Test score character on nil frequency",
			args: args{
				data:               []byte{72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33},
				englishLetterFreqs: nil,
			},
			want: 1.2774508924646872,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FrequencyScore(tt.args.data, tt.args.englishLetterFreqs); !IsEqualFloat(got, tt.want, epsilon) {
				t.Errorf("FrequencyScore() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_ReadFileLineByLine(t *testing.T) {
	type args struct {
		filePath string
		dirPath  string
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			name: "Test run readFile successfully",
			args: args{
				filePath: "frequency.txt",
				dirPath:  t.TempDir(),
			},
			want:    []byte{72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33},
			wantErr: false,
		},
		{
			name: "Test run readFile set default directory path when directory empty",
			args: args{
				filePath: "frequency",
				dirPath:  "",
			},
			want:    nil,
			wantErr: false,
		},
		{
			name: "Should throw error on empty file path",
			args: args{
				filePath: "",
				dirPath:  t.TempDir(),
			},
			want:    nil,
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Create a temporary file with some random data if file path exists
			if tt.args.filePath != "" {
				tempFile, err := os.Create(filepath.Join(tt.args.dirPath, tt.args.filePath))
				if err != nil {
					t.Logf("Unexpected error creating temporary file: %v", err)
					return
				}
				defer func() {
					if err := os.Remove(tempFile.Name()); err != nil {
						t.Logf("Unexpected error removing temporary file: %v", err)
					}
				}()

				_, err = tempFile.Write(tt.want)
				if err != nil {
					t.Logf("Unexpected error writing to temporary file: %v", err)
					return
				}

				if err := tempFile.Close(); err != nil {
					t.Logf("Unexpected error closing temporary file: %v", err)
				}
			}

			// Test reading the temporary file
			got, err := ReadFileLineByLine(tt.args.dirPath, tt.args.filePath)

			if (err != nil) != tt.wantErr {
				t.Errorf("readFile() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("readFile() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_IsEqualFloat(t *testing.T) {
	type args struct {
		a       float64
		b       float64
		epsilon float64
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Test IsEqualFloat run successfully 1",
			args: args{
				a:       0.111111111111111,
				b:       0.1111111111111,
				epsilon: 1e-10,
			},
			want: true,
		},
		{
			name: "Test IsEqualFloat run successfully 2",
			args: args{
				a:       10.123111111111111,
				b:       10.123111111222222,
				epsilon: 1e-10,
			},
			want: false,
		},
		{
			name: "Test IsEqualFloat run successfully 3",
			args: args{
				a:       0.111111111111111,
				b:       0.1111,
				epsilon: 1e-10,
			},
			want: false,
		},
		{
			name: "Test IsEqualFloat run successfully 4",
			args: args{
				a:       0.11111531054111111,
				b:       1.23,
				epsilon: 1e-10,
			},
			want: false,
		},
		{
			name: "Test IsEqualFloat run successfully 4",
			args: args{
				a:       0.111131511111,
				b:       0.111111111111,
				epsilon: 1e-10,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsEqualFloat(tt.args.a, tt.args.b, tt.args.epsilon); got != tt.want {
				t.Errorf("IsEqualFloat() = %v, want %v", got, tt.want)
			}
		})
	}
}
